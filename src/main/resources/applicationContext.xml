<?xml version="1.0" encoding="utf-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--扫描指定包下的类，将其注册为bean-->
    <context:component-scan base-package="com.springdemo.aop"/>
    <!--启用AspectJ自动代理，其中proxy-target-class为true表示使用CGLib的代理方式，false表示JDK的代理方式，默认false-->
    <aop:aspectj-autoproxy/>

    <!--
        开启注解方式注册掉代码
    -->
<!--    <bean name="advice" class="com.springdemo.aop.advice.MyAdvice"/>-->
<!--    &lt;!&ndash; 4.通知对象织入目标对象 .expression:切入点表达式。id：切入点名字-->
<!--    public void cn.qlq.service.UserServiceImpl.save()    对指定类型指定返回值的空参方法进行增强-->
<!--    void cn.qlq.service.UserServiceImpl.save()          public可以省去，默认public-->
<!--    * cn.qlq.service.UserServiceImpl.save()        对返回类型不做要求，可以对任何返回类型织入-->
<!--    * cn.qlq.service.UserServiceImpl.*()        对返回类型不做要求，对方法名字不做要求-->
<!--    * cn.qlq.service.UserServiceImpl.*(..)        对返回类型不做要求，对方法名字不做要求,对参数也不做要求-->
<!--    * cn.qlq.service.*ServiceImpl.*(..)        对service包下所有以ServiceImpl结尾的类中的任意参数的任意方法增强-->
<!--    * cn.qlq.service..*ServiceImpl.*(..)        与上面不同的是对service包的子包也要进行增强(一般不用)    &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 配置切点 &ndash;&gt;-->
<!--        <aop:pointcut id="pc" expression="execution(* com.springdemo.aop.service.*ServiceImpl.*(..))"/>-->
<!--        &lt;!&ndash; 将通知织入切点形成切面 &ndash;&gt;-->
<!--        <aop:aspect ref="advice">-->
<!--            <aop:before method="before" pointcut-ref="pc"/>-->
<!--            <aop:after-returning method="afterRunning" pointcut-ref="pc"/>-->
<!--            <aop:after method="after" pointcut-ref="pc"/>-->
<!--            <aop:around method="around" pointcut-ref="pc"/>-->
<!--            <aop:after-throwing method="afterException" pointcut-ref="pc"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->
</beans>
